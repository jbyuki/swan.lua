:: scratch.lua
; reload
; start debugger
; playground
; testing
; test symbols
; show results
; stop debugger

;; start debugger
require"osv".launch { port = 8086 }

;; stop debugger
require"osv".stop()

;; reload
package.loaded["swan"] = nil
swan = require"swan"

;; test symbols
local a, b = swan.symbols "a b"
local eq = (a+b)^4
eq = eq:expand():simplify()
io.write(tostring(eq))

;; playground
; reload
local a, b, c = swan.symbols "a b c"
local eq1 = a+b
local eq2 = b+a
local eq3 = b+c
local eq4 = a+b
io.write(tostring(eq1 == eq2) .. "\n")
io.write(tostring(eq1 == eq3) .. "\n")
io.write(tostring(eq1 == eq4))

;; playground
; reload
local a, b, c = swan.symbols "a b c"
local eq1 = (a+b)^3
eq1 = eq1:expand():simplify()
io.write(tostring(eq1))

;; playground
local a = {1,2,3}
table.insert(a,1,0)
io.write(vim.inspect(a))

;; playground
; reload
local a, b = swan.symbols "a b"
local cubic = (a+b)^3
swan.poly(cubic, a, b)

;; playground
; reload
local a,b,c = swan.symbols "a b c"
local eq = (a+b+c)^4
local p = swan.poly(eq, a, b)
io.write(tostring(p.coeffs[1]))

;; playground
; reload
local x,y,z = swan.symbols "x y z"
local eq = 4*x*y^2*z + 4*z^2 - 5*x^3 + 7*x^2*z^2
local p = swan.poly_with_order(eq, "lex", x, y, z)
io.write(tostring(p:lt()))

;; playground
; reload
local x,y,z = swan.symbols "x y z"
local p = swan.poly_with_order(eq, "lex", x,y,z)
io.write(tostring(p))

;; playground
; reload
local x,y = swan.symbols "x y"
local k = swan.poly_ring("grlex", x, y)
local f1 = swan.poly(x^3  - 2*x*y, k)
local f2 = swan.poly(x^2*y - 2*y^2 + x, k)
local G = swan.buchberger(f1,f2)
for i=1,#G do
  io.write(tostring(G[i]) .. "\n")
end

;; playground
; reload
local x,y = swan.symbols "x y"
local k = swan.poly_ring("grlex", x, y)
local p = swan.poly(swan.constant(4)/swan.constant(3), k)
io.write(tostring(p))

;; playground
; reload
local a = swan.constant(4)
local b = swan.constant(6)
io.write(tostring((a/b + b/a):simplify()))

;; playground
; reload
local x,y,z,l = swan.symbols "x y z l"
local k = swan.poly_ring("grlex", x, y, z, l)
local f1 = swan.poly(3*x^2 + 2*y*z - 2*x*l, k)
local f2 = swan.poly(2*x*z - 2*y*l, k)
local f3 = swan.poly(2*x*y - 2*z - 2*z*l, k)
local f4 = swan.poly(x^2 + y^2 + z^2 - 1, k)
local G = swan.buchberger(f1,f2,f3,f4)
io.write(tostring(#G))
