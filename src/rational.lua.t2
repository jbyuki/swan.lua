;;; swan
;; exp types
RATIONAL = 6,

;; order lookup
[EXP_TYPE.RATIONAL] = 10,

;; variables
local create_rational
local rational_mt = {}
local rational_methods = {}

;; copy metamethods
rational_mt.__index = rational_methods

;; implement
function create_rational(num, den)
  assert(den ~= 0)

	local rational = {}
	rational.type = EXP_TYPE.RATIONAL
	rational.num = num
	rational.den = den
  rational = setmetatable(rational, rational_mt)
  return rational
end

;; variables
local isint

;; implement
function isint(n)
  return math.floor(n) == n
end

;; implement
function rational_methods:gcd()
  local a = gcd(self.num, self.den)
  local num = self.num / a
  local den = self.den / a

  if den == 1 then
    return create_constant(num)
  else
    return create_rational(num, den)
  end
end

;; variables
local rational_simplify_neg

;; implement
function rational_simplify_neg(num,den) 
  if num < 0 and den < 0 then
    num = -num
    den = -den
  elseif den < 0 then
    num = -num
    den = -den
  end
  return num, den
end

;; implement
function rational_methods:normal_form()
  local result = self:gcd()
  result.num, result.den = rational_simplify_neg(result.num, result.den)
  return result
end

;; implement
function constant_mt:__div(other)
	if other.type == EXP_TYPE.CONSTANT then
		return create_rational(self.value, other.value):gcd()
	elseif other.type == EXP_TYPE.RATIONAL then
		return create_rational(self.value * self.den, other.num):gcd()
	else
		assert(false)
	end
end

;; implement
function rational_mt:__div(other)
	if other.type == EXP_TYPE.CONSTANT then
		return create_rational(self.num, self.den * other.value):gcd()
	elseif other.type == EXP_TYPE.RATIONAL then
		return create_rational(self.num * self.den, self.den * other.num):gcd()
	else
		assert(false)
	end
end

;; implement
function rational_mt:__tostring()
  return "(" .. tostring(self.num) .. "/" .. tostring(self.den) .. ")"
end

;; if rational then clone
if self.type == EXP_TYPE.RATIONAL then
  return self:clone()
end

;; copy metamethods
rational_methods.expand = exp_methods.expand
rational_methods.simplify = exp_methods.simplify

;; implement
function rational_methods:clone()
  return self
end

;; if rational return gcd of it
elseif self.type == EXP_TYPE.RATIONAL then
  return self:gcd()

;; if rational return with numerator minus
elseif self.type == EXP_TYPE.RATIONAL then
  return create_rational(-self.num, self.den)

;; copy metamethods
rational_mt.__unm = sym_mt.__unm
