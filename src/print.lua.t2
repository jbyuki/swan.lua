;;; swan
;; implement
function sym_mt:__tostring()
	return self.name
end

;; implement
function add_exp_mt:__tostring()
	local children_str = {}
	; transform children to string add
	return table.concat(children_str, " + ")
end

;; transform children to string add
for i=1,#self.children do
	table.insert(children_str, tostring(self.children[i]))
end

;; implement
function mul_exp_mt:__tostring()
	local children_str = {}
	; transform children to string mul
	; transform same children to power of children
end

;; transform children to string mul
for i=1,#self.children do
	local child_str = tostring(self.children[i])
	if self.children[i].type == EXP_TYPE.ADD then
		table.insert(children_str, ("(%s)"):format(child_str))
	else
		table.insert(children_str, child_str)
	end
end

;; variables
local constant_mt = {}

;; register constant metamethods
constant = setmetatable(constant, constant_mt)

;; implement
function constant_mt:__tostring()
	return tostring(self.value)
end

;; transform same children to power of children
; compactify successive same children
; construct children with power
return table.concat(elems,"")

;; compactify successive same children
local power = {}
local factors = {}
local last_child

for i=1,#children_str do
	local child = children_str[i]
	if last_child == child then
		power[#power] = power[#power] + 1
	else
		table.insert(power, 1)
		table.insert(factors, child)
	end
	last_child = factors[#factors]
end

;; variables
local superscript = { 
	["+"] = "⁺", ["-"] = "⁻", ["="] = "⁼", ["("] = "⁽", [")"] = "⁾",
	["n"] = "ⁿ",
	["0"] = "⁰", ["1"] = "¹", ["2"] = "²", ["3"] = "³", ["4"] = "⁴", ["5"] = "⁵", ["6"] = "⁶", ["7"] = "⁷", ["8"] = "⁸", ["9"] = "⁹",
	["i"] = "ⁱ", ["j"] = "ʲ", ["w"] = "ʷ",
  ["T"] = "ᵀ", ["A"] = "ᴬ", ["B"] = "ᴮ", ["D"] = "ᴰ", ["E"] = "ᴱ", ["G"] = "ᴳ", ["H"] = "ᴴ", ["I"] = "ᴵ", ["J"] = "ᴶ", ["K"] = "ᴷ", ["L"] = "ᴸ", ["M"] = "ᴹ", ["N"] = "ᴺ", ["O"] = "ᴼ", ["P"] = "ᴾ", ["R"] = "ᴿ", ["U"] = "ᵁ", ["V"] = "ⱽ", ["W"] = "ᵂ",
}

;; construct children with power
local elems = {}
for i=1,#factors do
	if power[i] == 1 then
		table.insert(elems, factors[i])
	else
		; convert superscript
		table.insert(elems, factors[i] .. sup)
	end
end

;; convert superscript
local sup = tostring(power[i])
local new_sup = ""
for j=1,#sup do
	new_sup = new_sup .. superscript[sup:sub(j,j)]
end
sup = new_sup
