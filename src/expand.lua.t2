;;; swan
;; implement
function exp_methods:expand()
  local new_children = {}
  ; expand all children
  if self.type == EXP_TYPE.MUL then
    ; distribute children
  end
  return exp.new(new_children, self.type)
end

;; expand all children
for i=1,#self.children do
  if self.children[i].expand then
    table.insert(new_children, self.children[i]:expand())
  else
    table.insert(new_children, self.children[i])
  end
end

;; distribute children
local num_terms = {}
local idx = {}
for i=1,#new_children do
  if new_children[i].type == EXP_TYPE.ADD then
    table.insert(num_terms, #new_children[i].children)
  else
    table.insert(num_terms, 0)
  end
  table.insert(idx, 1)
end

local term_children = {}
local idx_idx = 1
while true do
  ; add term children for current idx
  ; increase index or break
end

; create distributed expression

;; add term children for current idx
local mul_children
for i=1,#idx do
  local child
  if num_terms[i] == 0 then
    child = new_children[i]
  else
    child = new_children[i].children[idx[i]]
  end

  if not mul_children then
    mul_children = child
  else
    mul_children = mul_children * child
  end
end

table.insert(term_children, mul_children)

;; increase index or break
if idx[idx_idx] >= num_terms[idx_idx] then
  ; find leading index
  ; if not found then break
  ; increase leading index
  ; reset all lower index
  ; reset idx idx
else
  idx[idx_idx] = idx[idx_idx] + 1
end

;; find leading index
idx_idx = idx_idx + 1
found = false
while idx_idx <= #idx do
  if idx[idx_idx] < num_terms[idx_idx] then
    found = true
    break
  end
  idx_idx = idx_idx + 1
end

;; if not found then break
if not found then
  break
end

;; increase leading index
idx[idx_idx] = idx[idx_idx] + 1

;; reset all lower index
for i=1,idx_idx-1 do
  idx[i] = 1
end

;; reset idx idx
idx_idx = 1

;; create distributed expression
if #term_children == 1 then
  return term_children[1]
else
  return exp.new(term_children, EXP_TYPE.ADD)
end
