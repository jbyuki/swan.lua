;;; swan
;; implement
function sym_mt:__sub(other)
  if other.type == EXP_TYPE.MUL then
    local mul_children = {}
    table.insert(mul_children, M.constant(-1))
    for i=1,#other.children do
      table.insert(mul_children, other.children[i])
    end
    return exp.new({self, exp.new(mul_children, EXP_TYPE.MUL)}, EXP_TYPE.ADD)
  else
    return exp.new({self, exp.new({M.constant(-1), other}, EXP_TYPE.MUL)}, EXP_TYPE.ADD)
  end
end

;; define sym metamethods
__sub = sym_mt.__sub,

;; implement
function exp_mt:__sub(other)
  if other.type == EXP_TYPE.MUL then
    local mul_children = {}
    table.insert(mul_children, M.constant(-1))
    for i=1,#other.children do
      table.insert(mul_children, other.children[i])
    end
    other = exp.new(mul_children, EXP_TYPE.MUL)
  else
    other = exp.new({M.constant(-1), other}, EXP_TYPE.MUL)
  end

  if self.type == EXP_TYPE.ADD then
    local add_children = {}
    for i=1,#self.children do
      table.insert(add_children, self.children[i])
    end
    table.insert(add_children, other)
    return exp.new(add_children, EXP_TYPE.ADD)
  else
    return exp.new({self, other}, EXP_TYPE.ADD)
  end
end
