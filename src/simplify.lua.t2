;;; swan
;; copy metamethods
sym_methods.simplify = exp_methods.simplify
constant_methods.simplify = exp_methods.simplify

;; implement
function exp_methods:simplify()
	; if constant return as is
	; if rational return gcd of it
	; if symbol return as is
	; if exp simplify each children
end

;; if constant return as is
if self.type == EXP_TYPE.CONSTANT then
	return self:clone()

;; if symbol return as is
elseif self.type == EXP_TYPE.SCALAR then
	return self:clone()

;; if exp simplify each children
elseif self.type == EXP_TYPE.ADD or self.type == EXP_TYPE.MUL then
	local children_simplified = {}

	for i=1,#self.children do
		table.insert(children_simplified, self.children[i]:simplify())
	end

	; if add exp combine common terms
	; if mul exp leave children as is
end

;; if mul exp leave children as is
if self.type == EXP_TYPE.MUL then
	; combine constant and rational factor mul
	; if only constant factors return as constant
	; if only one return child as is
	local exp = create_mul_exp()
	exp.children = children_simplified
	return exp
end

;; if only one return child as is
if #children_simplified == 1 then
	return children_simplified[1]
end

;; if only constant factors return as constant
if #children_simplified == 0 then
	return create_constant(1)
end

;; if add exp combine common terms
if self.type == EXP_TYPE.ADD then
	; combine constant and rational term add
	local exp = create_add_exp()
	local terms = {}
	local coeffs = {}

	for i=1,#children_simplified do
		; check if any existing term is equal
		; otherwise add new term
	end

	local add_exp = exp
	for i=1,#terms do
		; create term with coefficient
	end

	; if only one add exp child return child
	; if only zero add exp child return 0

	return exp
end

;; if only one add exp child return child
if #add_exp.children == 1 then
	return add_exp.children[1]
end

;; if only zero add exp child return 0
if #add_exp.children == 0 then
	return create_constant(0)
end

;; variables
local create_constant

;; implement
function create_constant(value)
	local constant = {}
	constant.type = EXP_TYPE.CONSTANT
	constant.value = value
	; register constant metamethods
	return constant
end

;; create term with coefficient
if coeffs[i] > 1 then
	local exp
	if terms[i].type == EXP_TYPE.MUL then
		; append coeff at beginning
	else
		exp = create_mul_exp()
		exp.children = { create_constant(coeffs[i]), terms[i] }
	end
	table.insert(add_exp.children, exp:simplify())
else
	table.insert(add_exp.children, terms[i])
end

;; append coeff at beginning
exp = terms[i]
table.insert(exp.children, 1, create_constant(coeffs[i]))

;; check if any existing term is equal
local candidate = children_simplified[i]
; put candidate in normal form

local found = false
for j=1,#terms do
	; compare candidate against term
	; if equal add coefficient
end

;; otherwise add new term
if not found then
	table.insert(terms, candidate)
	table.insert(coeffs, 1)
end

;; compare candidate against term
local equal = false
local term = terms[j]
equal = term == candidate

;; if equal add coefficient
if equal then
	coeffs[j] = coeffs[j] + 1
	found = true
	break
end

;; put candidate in normal form
candidate = candidate:normal_form()

;; variables
local gcd

;; implement
function gcd(a,b)
  assert(isint(a))
  assert(isint(b))

  a = math.abs(a)
  b = math.abs(b)
  local t
  while b ~= 0 do
    t = b
    b = math.fmod(a,b)
    a = t
  end
	return a
end

;; combine constant and rational factor mul
local all_factor_num = 1
local all_factor_den = 1

local new_children_simplified = {}
for i=1,#children_simplified do
	if children_simplified[i].type == EXP_TYPE.CONSTANT then
		all_factor_num = all_factor_num  * children_simplified[i].value
	elseif children_simplified[i].type == EXP_TYPE.RATIONAL then
		all_factor_num = all_factor_num  * children_simplified[i].num
		all_factor_den = all_factor_den  * children_simplified[i].den
	else
		table.insert(new_children_simplified, children_simplified[i])
	end
end

local div = gcd(all_factor_num, all_factor_den)
all_factor_num = all_factor_num / div 
all_factor_den = all_factor_den / div 

all_factor_num, all_factor_den = rational_simplify_neg(all_factor_num, all_factor_den)

if all_factor_num ~= 1 and all_factor_den == 1 then
	table.insert(new_children_simplified, 1, create_constant(all_factor_num ))
elseif all_factor_den ~= 1 then
	table.insert(new_children_simplified, 1, create_rational(all_factor_num , all_factor_den))
end

children_simplified = new_children_simplified

;; combine constant and rational term add
local all_terms_num = 0
local all_terms_den = 1

local new_children_simplified = {}
for i=1,#children_simplified do
	if children_simplified[i].type == EXP_TYPE.CONSTANT then
		all_terms_num = all_terms_num + children_simplified[i].value * all_terms_den

		local div = gcd(all_terms_num , all_terms_den)
		all_terms_num = all_terms_num / div
		all_terms_den = all_terms_den / div

	elseif children_simplified[i].type == EXP_TYPE.RATIONAL then
		all_terms_num = all_terms_num * children_simplified[i].den + children_simplified[i].num * all_terms_den
		all_terms_den = all_terms_den  * children_simplified[i].den

		local div = gcd(all_terms_num , all_terms_den)
		all_terms_num = all_terms_num / div
		all_terms_den = all_terms_den / div
	else
		table.insert(new_children_simplified, children_simplified[i])
	end
end

all_terms_num, all_terms_den = rational_simplify_neg(all_terms_num, all_terms_den)

if all_terms_num ~= 0 and all_terms_den == 1 then
	table.insert(new_children_simplified, 1, create_constant(all_terms_num ))
elseif all_terms_num ~= 0 and all_terms_den ~= 1 then
	table.insert(new_children_simplified, 1, create_rational(all_terms_num , all_terms_den))
end

children_simplified = new_children_simplified
