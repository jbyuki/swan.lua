;;; swan
;; copy metamethods
sym_methods.simplify = exp_methods.simplify
constant_methods.simplify = exp_methods.simplify

;; implement
function exp_methods:simplify()
	; if constant return as is
	; if symbol return as is
	; if exp simplify each children
end

;; if constant return as is
if self.type == EXP_TYPE.CONSTANT then
	return self:clone()

;; if symbol return as is
elseif self.type == EXP_TYPE.SCALAR then
	return self:clone()

;; if exp simplify each children
elseif self.type == EXP_TYPE.ADD or self.type == EXP_TYPE.MUL then
	local children_simplified = {}

	for i=1,#self.children do
		table.insert(children_simplified, self.children[i]:simplify())
	end

	; if add exp combine common terms
	; if mul exp leave children as is
end

;; if mul exp leave children as is
if self.type == EXP_TYPE.MUL then
	; combine constant factor mul
	local exp = create_mul_exp()
	exp.children = children_simplified
	return exp
end

;; if add exp combine common terms
if self.type == EXP_TYPE.ADD then
	; combine constant term add
	local exp = create_add_exp()
	local terms = {}
	local coeffs = {}

	for i=1,#children_simplified do
		; check if any existing term is equal
		; otherwise add new term
	end

	local add_exp = exp
	for i=1,#terms do
		; create term with coefficient
	end

	return exp
end

;; variables
local create_constant

;; implement
function create_constant(value)
	local constant = {}
	constant.type = EXP_TYPE.CONSTANT
	constant.value = value
	; register constant metamethods
	return constant
end

;; create term with coefficient
if coeffs[i] > 1 then
	local exp
	if terms[i].type == EXP_TYPE.MUL then
		; append coeff at beginning
	else
		exp = create_mul_exp()
		exp.children = { create_constant(coeffs[i]), terms[i] }
	end
	table.insert(add_exp.children, exp:simplify())
else
	table.insert(add_exp.children, terms[i])
end

;; append coeff at beginning
exp = terms[i]
table.insert(exp.children, 1, create_constant(coeffs[i]))

;; check if any existing term is equal
local candidate = children_simplified[i]
; put candidate in normal form

local found = false
for j=1,#terms do
	; compare candidate against term
	; if equal add coefficient
end

;; otherwise add new term
if not found then
	table.insert(terms, candidate)
	table.insert(coeffs, 1)
end

;; compare candidate against term
local equal = false
local term = terms[j]
equal = term == candidate

;; if equal add coefficient
if equal then
	coeffs[j] = coeffs[j] + 1
	found = true
	break
end

;; put candidate in normal form
candidate = candidate:normal_form()

;; combine constant factor mul
local all_factor = 1
local new_children_simplified = {}
for i=1,#children_simplified do
	if children_simplified[i].type == EXP_TYPE.CONSTANT then
		all_factor = all_factor * children_simplified[i].value
	else
		table.insert(new_children_simplified, children_simplified[i])
	end
end

if all_factor ~= 1 then
	local constant = create_constant()
	constant.value = all_factor
	table.insert(new_children_simplified, 1, constant)
end

children_simplified = new_children_simplified

;; combine constant term add
local all_terms = 0
local new_children_simplified = {}
for i=1,#children_simplified do
	if children_simplified[i].type == EXP_TYPE.CONSTANT then
		all_terms = all_terms + children_simplified[i].value
	else
		table.insert(new_children_simplified, children_simplified[i])
	end
end

if all_terms ~= 0 then
	local constant = create_constant()
	constant.value = all_terms
	table.insert(new_children_simplified, 1, constant)
end

children_simplified = new_children_simplified
