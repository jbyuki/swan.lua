;;; ../swan
;; exp types
DIST = 11,

;; variables
local DIST_TYPE = {
  ; distribution types
}

;; distribution types
UNDEFINED = 0,
NORMAL = 1,

;; variables
local create_dist_exp
local dist_methods = {}
local dist_mt = {}
dist_mt.__index = dist_methods

;; implement
function create_dist_exp(dist_type)
  local exp = {}
  exp.type = EXP_TYPE.DIST
  exp.args = {}
  exp.dist_type = dist_type or DIST_TYPE.UNDEFINED
  setmetatable(exp, dist_mt)
  return exp
end

;; implement
function dist_mt:__tostring()
  if self.dist_type == DIST_TYPE.UNDEFINED then
    return "undefined"
  ; print out distribution
  end
  return "undefined"
end

;; implement
function M.normal(mu, sigma)
  local exp = create_dist_exp(DIST_TYPE.NORMAL)
  exp.mu = mu
  exp.sigma = sigma
  return exp
end

;; print out distribution
elseif self.dist_type == DIST_TYPE.NORMAL then
  return "N(" .. tostring(self.mu) .. "," .. tostring(self.sigma) .. ")"

;; exp types
ADD_DIST = 12,
MUL_DIST = 13,

;; lookups
local addable_with_dist = {
  [EXP_TYPE.DIST] = true,
  [EXP_TYPE.SCALAR] = true,
  [EXP_TYPE.CONSTANT] = true,
  [EXP_TYPE.ADD_DIST] = true,
  [EXP_TYPE.MUL_DIST] = true,
  ; addable with dist
}

;; variables
local create_add_disp_exp
local create_mul_disp_exp
local add_disp_mt = {}
local mul_disp_mt = {}

;; implement
function create_add_disp_exp()
  local exp = {}
  exp.type = EXP_TYPE.ADD_DIST
  setmetatable(exp, add_disp_mt)
  return exp
end

function create_mul_disp_exp()
  local exp = {}
  exp.type = EXP_TYPE.MUL_DIST
  setmetatable(exp, mul_disp_mt)
  return exp
end

;; implement
function dist_mt:__add(other)
  local exp = create_add_disp_exp()
  exp.children = {}

  for _, term in ipairs({self, other}) do
    if type(term) == "number" then
      term = create_constant(term)
    end
    assert(addable_with_dist[term.type])
    if term.type == EXP_TYPE.ADD_DIST then
      for _, child in term.children do
        table.insert(exp, term)
      end
    else
      table.insert(exp.children, term)
    end
  end

  return exp
end

;; copy metamethods
add_disp_mt.__add = dist_mt.__add
mul_disp_mt.__add = dist_mt.__add

;; lookups
local mulable_with_dist = {
  [EXP_TYPE.CONSTANT] = true,
  [EXP_TYPE.SCALAR] = true,
  [EXP_TYPE.DIST] = true,
  [EXP_TYPE.ADD_DIST] = true,
  [EXP_TYPE.MUL_DIST] = true,
  ; addable with dist
}

;; implement
function dist_mt:__mul(other)
  local exp = create_mul_disp_exp()
  exp.children = {}

  for _, fac in ipairs({self, other}) do
    if type(fac) == "number" then
      fac = create_constant(fac)
    end
    assert(mulable_with_dist[fac.type])
    if fac.type == EXP_TYPE.MUL_DIST then
      for _, child in fac.children do
        table.insert(exp, fac)
      end
    else
      table.insert(exp.children, fac)
    end
  end

  return exp
end

;; copy metamethods
add_disp_mt.__mul = dist_mt.__mul
mul_disp_mt.__mul = dist_mt.__mul

