;;; ../swan
;; implement
function dist_methods:E()
  if self.dist_type == DIST_TYPE.NORMAL then
    return self.mu
  elseif self.dist_type == DIST_TYPE.ADD then
    ; return sum of expected values
  elseif self.dist_type == DIST_TYPE.MUL then
    if #self.children == 2 and self.children[1] == self.children[2] then
      local child = self.children[1]
      if child.type == EXP_TYPE.DIST and child.dist_type == DIST_TYPE.NORMAL then
        return child.mu ^2 + child.var
      end
    end
  end
  assert(false)
end

;; implement
function dist_mt:__pow(sup)
	assert(type(sup) == "number", "exponent must be a constant number")
	assert(is_integer(sup), "exponent must be a constant integer number")

  local exp = create_mul_disp_exp()
  for i=1,sup do
    table.insert(exp.children, self)
  end
  return exp
end

;; copy metamethods
add_disp_methods.E = dist_methods.E
mul_disp_methods.E = dist_methods.E

;; return sum of expected values
local sum_e = {}
for _, child in ipairs(self.children) do
  table.insert(sum_e, child:E())
end

assert(#sum_e > 0)
if #sum_e == 1 then
  return sum_e[1]
else
  local exp = create_add_disp_exp()
  exp.children = sum_e
  return exp
end
