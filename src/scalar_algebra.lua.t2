;;; swan
;; variables
local sym_mt = {}

;; implement
function sym_mt:__add(other)
	; create add expression
	; register add expression metamethods
	; collect self add expression
	; collect other add expression
	return exp
end

;; register scalar sym metamethods
sym = setmetatable(sym, sym_mt)

;; variables
local EXP_TYPE = {
	ADD = 1,
	; exp types
}

;; create add expression
local exp = {}
exp.type = EXP_TYPE.ADD
exp.children = {}

;; exp types
CONSTANT = 5,

;; collect self add expression
if type(self) == "number" then
	local constant = create_constant()
	constant.value = self
	table.insert(exp.children, constant)
elseif self.type and self.type == EXP_TYPE.ADD then
	for _, child in ipairs(self.children) do
		table.insert(exp.children, child)
	end
else
	table.insert(exp.children, self)
end

;; collect other add expression
if type(other) == "number" then
	local constant = create_constant()
	constant.value = other
	table.insert(exp.children, constant)
elseif other.type and other.type == EXP_TYPE.ADD then
	for _, child in ipairs(other.children) do
		table.insert(exp.children, child)
	end
else
	table.insert(exp.children, other)
end

;; variables
local add_exp_mt = {}

;; copy metamethods
add_exp_mt.__add = sym_mt.__add 

;; register add expression metamethods
exp = setmetatable(exp, add_exp_mt)

;; implement
function sym_mt:__mul(other)
	; create mul expression
	; register mul expression metamethods
	; collect self mul expression
	; collect other mul expression
	return exp
end

;; exp types
MUL = 2,

;; create mul expression
local exp = {}
exp.type = EXP_TYPE.MUL
exp.children = {}

;; collect self mul expression
if type(self) == "number" then
	local constant = {}
	constant.type = EXP_TYPE.CONSTANT
	constant.value = self
	; register constant metamethods
	table.insert(exp.children, constant)
elseif self.type and self.type == EXP_TYPE.MUL then
	for _, child in ipairs(self.children) do
		table.insert(exp.children, child)
	end
else
	table.insert(exp.children, self)
end

;; collect other mul expression
if other.type and other.type == EXP_TYPE.MUL then
	for _, child in ipairs(other.children) do
		table.insert(exp.children, child)
	end
else
	table.insert(exp.children, other)
end

;; variables
local mul_exp_mt = {}

;; copy metamethods
mul_exp_mt.__mul = sym_mt.__mul
add_exp_mt.__mul = sym_mt.__mul
mul_exp_mt.__add = sym_mt.__add

;; register mul expression metamethods
exp = setmetatable(exp, mul_exp_mt)

;; implement
function sym_mt:__sub(other)
	; create add expression
	; register add expression metamethods
	; collect self add expression
	; collect other add expression with negative one
	return exp
end

;; collect other add expression with negative one
if type(other) == "number" then
	local constant = create_constant()
	constant.value = other
	table.insert(exp.children, -constant)
elseif other.type and other.type == EXP_TYPE.ADD then
	for _, child in ipairs(other.children) do
		table.insert(exp.children, -child)
	end
else
	table.insert(exp.children, -other)
end

;; implement
function sym_mt:__unm()
	if self.type == EXP_TYPE.CONSTANT then
		local result = create_constant()
		result.value = -self.value
		return result
	elseif self.type == EXP_TYPE.ADD then
		local exp = create_add_exp()
		for i=1,#result.children do
			table.insert(exp.children, -self.children[i])
		end
		return exp
	else
		local exp = create_mul_exp()
		local constant = create_constant()
		constant.value = -1
		table.insert(exp.children, constant)
		if self.type == EXP_TYPE.MUL then
			for _,child in ipairs(self.children) do
				table.insert(exp.children, child)
			end
		else
			table.insert(exp.children, self)
		end
		return exp
	end
end

;; copy metamethods
add_exp_mt.__unm = sym_mt.__unm
mul_exp_mt.__unm = sym_mt.__unm
add_exp_mt.__sub = sym_mt.__sub
mul_exp_mt.__sub = sym_mt.__sub
constant_mt.__unm = sym_mt.__unm
constant_mt.__sub = sym_mt.__sub
constant_mt.__add = sym_mt.__add
constant_mt.__mul = sym_mt.__mul

;; implement
function constant_mt:__div(other)
	if other.type == EXP_TYPE.CONSTANT then
		return create_rational(self.value, other.value):gcd()
	elseif other.type == EXP_TYPE.RATIONAL then
		return create_rational(self.value * self.den, other.num):gcd()
	else
		assert(false)
	end
end

;; implement
function M.constant(value)
	return create_constant(value)
end
