;;; swan
;; implement
function M.poly(exp, ...)
	local vars = { ... }
	; check that all vars are scalar symbols
	; put exp in expanded normal form
	; construct vars lookup
	; collect all gens and coeffs
	; create poly object with gens and coeffs
end

;; check that all vars are scalar symbols
for i=1,#vars do
	assert(vars[i].type == EXP_TYPE.SCALAR)
end

;; put exp in expanded normal form
local norm_form = exp:expand():simplify()
; if single monomial add exp
; check that all are monomials

;; implement
function constant_methods:is_monomial()
	return true
end

function sym_methods:is_monomial()
	return true
end

function exp_methods:is_monomial()
	if self.type == EXP_TYPE.ADD then
		return false
	elseif self.type == EXP_TYPE.MUL then
		return true
	end
	return false
end

;; if single monomial add exp
if norm_form.type ~= EXP_TYPE.ADD then
	local add_exp = create_add_exp()
	add_exp.children = { norm_form }
	norm_form = add_exp
end

;; check that all are monomials
for i=1,#norm_form.children do
	assert(norm_form.children[i]:is_monomial(), tostring(norm_form.children[i]))
end

;; collect all gens and coeffs
for i=1,#norm_form.children do
	local term = norm_form.children[i]
	; create empty gen
	; detect gen for term
	; add coeff to gen
end

;; check that all vars are scalar symbols
assert(#vars > 0)

;; create empty gen
local gen = {}
for j=1,#vars do
	table.insert(gen, 0)
end

;; detect gen for term
local coeffs = {}
if term.type == EXP_TYPE.CONSTANT then
	table.insert(coeffs, term)
elseif term.type == EXP_TYPE.SCALAR then
	; check symbol is in generator 
elseif term.type == EXP_TYPE.MUL then
	; detect gen for monomial mul exp
else
	assert(false)
end

;; construct vars lookup
local vars_lookup = {}
for i=1,#vars do
	vars_lookup[vars[i]] = i
end

;; check symbol is in generator 
local idx = vars_lookup[term]
if idx then
	table.insert(coeffs, 1)
	gen[idx] = 1
else
	table.insert(coeffs, term)
end

;; detect gen for monomial mul exp
for j=1,#term.children do
	local found_gen = false
	if term.children[j].type == EXP_TYPE.SCALAR then
		local idx = vars_lookup[term.children[j]]
		if idx then
			gen[idx] = gen[idx] + 1
			found_gen = true
		end
	end

	if not found_gen then
		table.insert(coeffs, term.children[j])
	end
end

;; add coeff to gen
local coeff_exp = create_mul_exp()
if #coeffs == 0 then
	local constant = create_constant()
	constant.value = 1
	table.insert(coeffs, constant)
end
coeff_exp.children = coeffs
io.write(tostring(coeff_exp) .. "\n")
io.write(vim.inspect(gen) .. "\n")
