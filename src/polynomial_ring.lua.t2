;;; swan
;; variables
local poly_ring_methods = {}
local poly_ring_mt = {}

;; copy metamethods
poly_ring_mt.__index = poly_ring_methods

;; implement
function create_poly_ring()
	local poly_ring = {}
  poly_ring = setmetatable(poly_ring, poly_ring_mt)
  poly_ring.vars = {}
  poly_ring.gen_list = {}
  poly_ring.mono_order = nil
  return poly_ring
end

;; implement
function M.poly_ring(order, ...)
  local poly_ring = create_poly_ring()
  poly_ring.vars = { ... }
  local mono_order = nil
  ; set mono order based on order
  poly_ring.mono_order = mono_order
  return poly_ring
end

;; set mono order based on order
local mono_order = nil

if order == 'lex' then
	mono_order = function(a,b) 
		; lex order
	end
elseif order == 'grlex' then
	mono_order = function(a,b)
		; compute total degrees
		if total_a < total_b then
			return true
		elseif total_a > total_b then
			return false
		else
			; lex order
		end
	end
elseif order == 'grevlex' then
	mono_order = function(a,b)
		; compute total degrees
		if total_a < total_b then
			return true
		elseif total_a > total_b then
			return false
		else
			; break ties grevlex
		end
	end
end

;; compute total degrees
local total_a = 0
local total_b = 0
for i=1,#a do
	total_a = total_a + a[i]
	total_b = total_b + b[i]
end

;; lex order
for i=1,#a do
	if a[i] < b[i] then
		return true
	elseif a[i] > b[i] then
		return false
	end
end

;; break ties grevlex
for i=#a,1 do
	if a[i] - b[i] < 0 then
		return false
	elseif a[i] - b[i] > 0 then
		return true
	end
end
return true

;; implement
function poly_ring_methods:unique_gen(gen)
  assert(#gen == #self.vars)

  for i=1,#self.gen_list do
    local same = true
    for j=1,#gen do
      if self.gen_list[i][j] ~= gen[j] then
        same = false
        break
      end
    end

    if same then
      return self.gen_list[i]
    end
  end

  table.insert(self.gen_list, gen)
  return gen
end

;; get gen from polynomial ring
local ring_gens = {}
for i=1,#sorted_gens do
  table.insert(ring_gens, poly_ring:unique_gen(sorted_gens[i]))
end
