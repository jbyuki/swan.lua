;;; swan
:: ../lua/swan/init.lua
local M = {}
; variables
; singletons
; lookups
; implement
; copy metamethods
return M

;; implement
function M.symbols(str)
	; split into tokens
	local syms = {}
	for _, elem in ipairs(elems) do
		local sym = {}
		; if indices create array
		; otherwise create scalar symbols
		table.insert(syms, sym)
	end
	return unpack(syms)
end

;; split into tokens
local elems = vim.split(str, "%s+", { trimempty = true })

;; if indices create array
if elem:match(".+%d+:%d+$") then
	local name, idx1, idx2 = elem:match("(.+)(%d+):(%d+)$")
	sym.name = name
	sym.range = {tonumber(idx1), tonumber(idx2)}
	; set type sym array
	; register sym array metamethods
	; create array of syms

;; otherwise create scalar symbols
else
	local name = vim.trim(elem)
	; convert name to greek if necessary
	sym.name = name
	; set type sym
	; register scalar sym metamethods
end

;; create array of syms
sym.syms = {}
local sym_array = sym
for idx=sym.range[1],sym.range[2] do
	local sym = {}
	sym.name = ("%s%d"):format(name, idx)
	; set type sym
	; register scalar sym metamethods
	table.insert(sym_array.syms, sym)
end

;; variables
local sym_array_mt = {}

;; implement
function sym_array_mt:__index(index)
	return self.syms[index]
end

;; register sym array metamethods
sym = setmetatable(sym, sym_array_mt)
