;;; swan
;; declare
local matrix_set = {}
M.matrix_set = matrix_set


;; define sets
function matrix_set:new(m,n)
  local set = {}
  set.m = m
  set.n = n
  set.is_matrix = true
  ; init matrix elements
  return setmetatable(set, { __index = self })
end

;; implement
function matrix_set:__tostring()
  if self.assigned then
    ; transform all elements to grid
    ; grid concat all elements
    ; create left and right bracket and concat
    ; return matrix grid string representation
  else
    return self.name
  end
end

;; transform all elements to grid
local grid_elems = {}
for i=1,#self.elems do
  grid_elems[i] = {}
  for j=1,#self.elems[i] do
    local elem = tostring(self.elems[i][j])
    if elem == "0" then
      elem = " "
    end
    if not is_matrix_rec(self.elems[i][j]) then
      elem = elem .. " "
    end
    grid_elems[i][j] = grid.new(elem)
  end
end

;; grid concat all elements
grid.resize_concat_grid(grid_elems)
; if any elem is matrix put separators
local matrix_grid = grid.concat_grid(grid_elems)

;; create left and right bracket and concat
matrix_grid:enclose_bracket()

;; return matrix grid string representation
return tostring(matrix_grid)

;; implement
function matrix_set:size()
  return { self.set.m, self.set.n }
end

;; init matrix elements
set.elems = {}
for i=1,m do
  set.elems[i] = {}
end

;; implement
function matrix_set:assign(arr)
  self.assigned = true
  assert(#arr == self.m)
  for i=1,self.m do
    assert(#arr[i] == self.n)
    for j=1,self.n do
      self.elems[i][j] = arr[i][j]
    end
  end
end

;; if any elem is matrix put separators
local has_matrix_elem = false
for i=1,self.m do
  for j=1,self.n do
    if is_matrix_rec(self.elems[i][j]) then
      has_matrix_elem = true
      break
    end
  end
end

if has_matrix_elem then
  grid.put_separators_grid(grid_elems)
end

;; implement
function is_matrix_rec(exp)
  if exp.children then
    for i=1,#exp.children do
      if is_matrix_rec(exp.children[i]) then
        return true
      end
    end
  else
    return exp.is_matrix and exp.assigned
  end
end
